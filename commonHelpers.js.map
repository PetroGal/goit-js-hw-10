{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startButton = document.querySelector('button[data-start]');\nconst datePicker = document.querySelector('#datetime-picker');\n\nconst timerFields = {\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\n\nlet timerInterval;\nlet userSelectedDate = null;\n\nstartButton.disabled = true;\ndatePicker.classList.add('input-disabled');\n\ndatePicker.addEventListener('click', () => {\n  datePicker.classList.remove('input-disabled');\n});\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n      startButton.classList.add('btn-normal');\n    }\n  },\n};\n\nflatpickr(datePicker, options);\n\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  // datePicker.classList.remove('input-disabled');\n\n  const startTime = new Date();\n  const endTime = userSelectedDate.getTime();\n\n  startButton.disabled = true;\n  datePicker.disabled = true;\n\n  function updateTimer() {\n    const currentTime = new Date();\n    const timeRemaining = endTime - currentTime.getTime();\n\n    if (timeRemaining <= 0) {\n      clearInterval(timerInterval);\n      datePicker.disabled = false;\n      timerFields.days.textContent = '00';\n      timerFields.hours.textContent = '00';\n      timerFields.minutes.textContent = '00';\n      timerFields.seconds.textContent = '00';\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n\n    timerFields.days.textContent = addLeadingZero(days.toString());\n    timerFields.hours.textContent = addLeadingZero(hours.toString());\n    timerFields.minutes.textContent = addLeadingZero(minutes.toString());\n    timerFields.seconds.textContent = addLeadingZero(seconds.toString());\n  }\n\n  timerInterval = setInterval(updateTimer, 1000);\n  updateTimer(); // Initial call to set values at start\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.padStart(2, '0');\n}\n\n// **************************************************************************\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import iziToast from 'izitoast';\n// import 'izitoast/dist/css/iziToast.min.css';\n\n// const startButton = document.querySelector('button[data-start]');\n// const datePicker = document.querySelector('#datetime-picker');\n// const timerFields = {\n//   days: document.querySelector('[data-days]'),\n//   hours: document.querySelector('[data-hours]'),\n//   minutes: document.querySelector('[data-minutes]'),\n//   seconds: document.querySelector('[data-seconds]'),\n// };\n\n// let timerInterval;\n// let userSelectedDate = null;\n\n// startButton.disabled = true;\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     const selectedDate = selectedDates[0];\n//     if (selectedDate < new Date()) {\n//       iziToast.error({\n//         title: 'Error',\n//         message: 'Please choose a date in the future',\n//       });\n//       startButton.disabled = true;\n//     } else {\n//       userSelectedDate = selectedDate;\n//       startButton.disabled = false;\n//     }\n//   },\n// };\n\n// flatpickr(datePicker, options);\n\n// startButton.addEventListener('click', () => {\n//   if (!userSelectedDate) return;\n\n//   const startTime = new Date();\n//   const endTime = userSelectedDate.getTime();\n\n//   startButton.disabled = true;\n//   datePicker.disabled = true;\n\n//   function updateTimer() {\n//     const currentTime = new Date();\n//     const timeRemaining = endTime - currentTime.getTime();\n\n//     if (timeRemaining <= 0) {\n//       clearInterval(timerInterval);\n//       datePicker.disabled = false;\n//       timerFields.days.textContent = '00';\n//       timerFields.hours.textContent = '00';\n//       timerFields.minutes.textContent = '00';\n//       timerFields.seconds.textContent = '00';\n//       return;\n//     }\n\n//     const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n\n//     timerFields.days.textContent = addLeadingZero(days.toString());\n//     timerFields.hours.textContent = addLeadingZero(hours.toString());\n//     timerFields.minutes.textContent = addLeadingZero(minutes.toString());\n//     timerFields.seconds.textContent = addLeadingZero(seconds.toString());\n//   }\n\n//   timerInterval = setInterval(updateTimer, 1000);\n//   updateTimer(); // Initial call to set values at start\n// });\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function addLeadingZero(value) {\n//   return value.padStart(2, '0');\n// }\n\n// ***********************************************************************\n// function handleInput(event) {\n//   userSelectedDate = Date.now(event.target.value);\n\n//   console.log(userSelectedDate);\n// }\n\n// refs.inputEl.addEventListener('input', handleInput);\n\n// refs.startBtn.addEventListener('click', () => {\n//   timer.start();\n// });\n\n// const timer = {\n//   start() {\n//     const futureTime = Date.now('2024-05-18');\n//     //console.log(futureTime);\n//     setInterval(() => {\n//       const currentTime = Date.now();\n//       //console.log(currentTime);\n//       const deltaTime = futureTime - currentTime;\n//       // console.log(deltaTime);\n//       const time = convertMs(deltaTime);\n//       //console.log(time);\n//     }, 1000);\n//   },\n// };\n\n// function convertMs(ms) {\n//   // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   // Remaining days\n//   const days = Math.floor(ms / day);\n//   // Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n//   // Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   // Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["startButton","datePicker","timerFields","timerInterval","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","endTime","updateTimer","timeRemaining","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"+IAKA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAa,SAAS,cAAc,kBAAkB,EAEtDC,EAAc,CAClB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAEA,IAAIC,EACAC,EAAmB,KAEvBJ,EAAY,SAAW,GACvBC,EAAW,UAAU,IAAI,gBAAgB,EAEzCA,EAAW,iBAAiB,QAAS,IAAM,CACzCA,EAAW,UAAU,OAAO,gBAAgB,CAC9C,CAAC,EAED,MAAMI,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,EAAe,IAAI,MACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDR,EAAY,SAAW,KAEvBI,EAAmBG,EACnBP,EAAY,SAAW,GACvBA,EAAY,UAAU,IAAI,YAAY,EAEzC,CACH,EAEAS,EAAUR,EAAYI,CAAO,EAE7BL,EAAY,iBAAiB,QAAS,IAAM,CAC1C,GAAI,CAACI,EAAkB,OAKvB,MAAMM,EAAUN,EAAiB,UAEjCJ,EAAY,SAAW,GACvBC,EAAW,SAAW,GAEtB,SAASU,GAAc,CAErB,MAAMC,EAAgBF,EADF,IAAI,OACoB,QAAO,EAEnD,GAAIE,GAAiB,EAAG,CACtB,cAAcT,CAAa,EAC3BF,EAAW,SAAW,GACtBC,EAAY,KAAK,YAAc,KAC/BA,EAAY,MAAM,YAAc,KAChCA,EAAY,QAAQ,YAAc,KAClCA,EAAY,QAAQ,YAAc,KAClC,MACD,CAED,KAAM,CAAE,KAAAW,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAa,EAEjEV,EAAY,KAAK,YAAcgB,EAAeL,EAAK,SAAQ,CAAE,EAC7DX,EAAY,MAAM,YAAcgB,EAAeJ,EAAM,SAAQ,CAAE,EAC/DZ,EAAY,QAAQ,YAAcgB,EAAeH,EAAQ,SAAQ,CAAE,EACnEb,EAAY,QAAQ,YAAcgB,EAAeF,EAAQ,SAAQ,CAAE,CACpE,CAEDb,EAAgB,YAAYQ,EAAa,GAAI,EAC7CA,GACF,CAAC,EAED,SAASM,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeE,EAAO,CAC7B,OAAOA,EAAM,SAAS,EAAG,GAAG,CAC9B"}